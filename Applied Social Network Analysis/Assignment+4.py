
# coding: utf-8

# ---
# 
# _You are currently looking at **version 1.2** of this notebook. To download notebooks and datafiles, as well as get help on Jupyter notebooks in the Coursera platform, visit the [Jupyter Notebook FAQ](https://www.coursera.org/learn/python-social-network-analysis/resources/yPcBs) course resource._
# 
# ---

# # Assignment 4

# In[3]:


import networkx as nx
import pandas as pd
import numpy as np
import pickle
#import matplotlib.pyplot as plt
#%matplotlib inline  


# ---
# 
# ## Part 1 - Random Graph Identification
# 
# For the first part of this assignment you will analyze randomly generated graphs and determine which algorithm created them.

# In[2]:


P1_Graphs = pickle.load(open('A4_graphs','rb'))
P1_Graphs


# <br>
# `P1_Graphs` is a list containing 5 networkx graphs. Each of these graphs were generated by one of three possible algorithms:
# * Preferential Attachment (`'PA'`)
# * Small World with low probability of rewiring (`'SW_L'`)
# * Small World with high probability of rewiring (`'SW_H'`)
# 
# Anaylze each of the 5 graphs and determine which of the three algorithms generated the graph.
# 
# *The `graph_identification` function should return a list of length 5 where each element in the list is either `'PA'`, `'SW_L'`, or `'SW_H'`.*

# In[3]:


def graph_identification():
    ####Check for PA
    #degrees = nx.degree(P1_Graphs[4])
    #degree_values = sorted(set(degrees.values()))    
    #counts = [list(degrees.values()).count(i) for i in degree_values]
    #plt.scatter(degree_values, counts)
    #plt.xscale('log')
    #plt.yscale('log')
    
    ####Check for SW
    #for G in P1_Graphs:
    #    print(nx.average_clustering(G), nx.average_shortest_path_length(G))
    
    
    return ['PA', 'SW_L', 'SW_L', 'PA', 'SW_H']
graph_identification()

#0: PA
#1: SW_L
#2: SW_L
#3: PA
#4: SW_H


# ---
# 
# ## Part 2 - Company Emails
# 
# For the second part of this assignment you will be workking with a company's email network where each node corresponds to a person at the company, and each edge indicates that at least one email has been sent between two people.
# 
# The network also contains the node attributes `Department` and `ManagementSalary`.
# 
# `Department` indicates the department in the company which the person belongs to, and `ManagementSalary` indicates whether that person is receiving a management position salary.

# In[4]:


G = nx.read_gpickle('email_prediction.txt')

print(nx.info(G))


# ### Part 2A - Salary Prediction
# 
# Using network `G`, identify the people in the network with missing values for the node attribute `ManagementSalary` and predict whether or not these individuals are receiving a management position salary.
# 
# To accomplish this, you will need to create a matrix of node features using networkx, train a sklearn classifier on nodes that have `ManagementSalary` data, and predict a probability of the node receiving a management salary for nodes where `ManagementSalary` is missing.
# 
# 
# 
# Your predictions will need to be given as the probability that the corresponding employee is receiving a management position salary.
# 
# The evaluation metric for this assignment is the Area Under the ROC Curve (AUC).
# 
# Your grade will be based on the AUC score computed for your classifier. A model which with an AUC of 0.88 or higher will receive full points, and with an AUC of 0.82 or higher will pass (get 80% of the full points).
# 
# Using your trained classifier, return a series of length 252 with the data being the probability of receiving management salary, and the index being the node id.
# 
#     Example:
#     
#         1       1.0
#         2       0.0
#         5       0.8
#         8       1.0
#             ...
#         996     0.7
#         1000    0.5
#         1001    0.0
#         Length: 252, dtype: float64

# In[43]:


def salary_predictions():
    
    df = pd.DataFrame(index=G.nodes())
    #df['Department'] = pd.Series(nx.get_node_attributes(G, 'Department'))
    df['ManagementSalary'] = pd.Series(nx.get_node_attributes(G, 'ManagementSalary'))
    df['Email_correspondence'] = pd.Series(nx.degree(G))
    df['clustering'] = pd.Series(nx.clustering(G))
    df['cc'] = pd.Series(nx.closeness_centrality(G))
    df['bc'] = pd.Series(nx.betweenness_centrality(G))
    #df['pr'] = pd.Series(nx.pagerank(G))
    df_train = df.dropna()
    df_test = df[df['ManagementSalary'].isnull()]
    from sklearn.model_selection import train_test_split
    #from sklearn.linear_model import LogisticRegression
    from sklearn.metrics import roc_auc_score
    #X_train, X_test, y_train, y_test = train_test_split(df_train[['Email_correspondence', 'clustering', 'cc','bc']], df_train['ManagementSalary'])
    
    from sklearn.ensemble import RandomForestClassifier
    from sklearn.model_selection import cross_val_score
    #for depth in range(3,10):
    #    rfc = RandomForestClassifier(n_estimators=100, max_depth=depth)
    #    print(np.mean(cross_val_score(rfc, X_train, y_train, cv=5, scoring='roc_auc')))
    #lr = LogisticRegression()
    #print(np.mean(cross_val_score(lr, X_train, y_train, cv=5, scoring='roc_auc')))
    #lr.fit(X_train, y_train.values.reshape(-1,1))
    # predict probabilities
    #lr_probs = model.predict_proba(X_test)[:, 1]
    rfc = RandomForestClassifier(n_estimators=100, max_depth=5)
    rfc.fit(df_train[['Email_correspondence', 'clustering', 'cc','bc']], df_train['ManagementSalary'])
    rfc_probs = rfc.predict_proba(df_test[['Email_correspondence', 'clustering', 'cc','bc']])[:,1]
    result_series = pd.Series(rfc_probs, index=df_test.index)
    
    return result_series
salary_predictions()


# ### Part 2B - New Connections Prediction
# 
# For the last part of this assignment, you will predict future connections between employees of the network. The future connections information has been loaded into the variable `future_connections`. The index is a tuple indicating a pair of nodes that currently do not have a connection, and the `Future Connection` column indicates if an edge between those two nodes will exist in the future, where a value of 1.0 indicates a future connection.

# In[5]:


future_connections = pd.read_csv('Future_Connections.csv', index_col=0, converters={0: eval})
future_connections.head(10)


# Using network `G` and `future_connections`, identify the edges in `future_connections` with missing values and predict whether or not these edges will have a future connection.
# 
# To accomplish this, you will need to create a matrix of features for the edges found in `future_connections` using networkx, train a sklearn classifier on those edges in `future_connections` that have `Future Connection` data, and predict a probability of the edge being a future connection for those edges in `future_connections` where `Future Connection` is missing.
# 
# 
# 
# Your predictions will need to be given as the probability of the corresponding edge being a future connection.
# 
# The evaluation metric for this assignment is the Area Under the ROC Curve (AUC).
# 
# Your grade will be based on the AUC score computed for your classifier. A model which with an AUC of 0.88 or higher will receive full points, and with an AUC of 0.82 or higher will pass (get 80% of the full points).
# 
# Using your trained classifier, return a series of length 122112 with the data being the probability of the edge being a future connection, and the index being the edge as represented by a tuple of nodes.
# 
#     Example:
#     
#         (107, 348)    0.35
#         (542, 751)    0.40
#         (20, 426)     0.55
#         (50, 989)     0.35
#                   ...
#         (939, 940)    0.15
#         (555, 905)    0.35
#         (75, 101)     0.65
#         Length: 122112, dtype: float64

# In[8]:


def new_connections_predictions():
    
    df = future_connections
    df['Department'] = [1. if G.node[connection[0]]['Department'] == G.node[connection[1]]['Department'] else 0. for connection in future_connections.index]
    df['pa'] = [i[2] for i in nx.preferential_attachment(G, ebunch=future_connections.index)]
    df['cn'] = [len(set(nx.common_neighbors(G, connection[0], connection[1]))) for connection in future_connections.index]
    df_train = df.dropna()
    df_test = df[df['Future Connection'].isnull()]
    from sklearn.model_selection import train_test_split
    from sklearn.linear_model import LogisticRegression
    #from sklearn.metrics import roc_auc_score
    #X_train, X_test, y_train, y_test = train_test_split(df_train[['Department', 'pa', 'cn']], df_train['Future Connection'])
    
    #from sklearn.ensemble import RandomForestClassifier
    #from sklearn.model_selection import cross_val_score
    #rfc = RandomForestClassifier(n_estimators=100, max_depth=3)
    #print(np.mean(cross_val_score(rfc, X_train, y_train, cv=5, scoring='roc_auc')))
    lr = LogisticRegression()
    #print(np.mean(cross_val_score(lr, X_train, y_train, cv=5, scoring='roc_auc')))
    #lr.fit(X_train, y_train.values.reshape(-1,1))
    # predict probabilities
    #lr_probs = model.predict_proba(X_test)[:, 1]
    #rfc = RandomForestClassifier(n_estimators=100, max_depth=5)
    lr.fit(df_train[['Department', 'pa', 'cn']], df_train['Future Connection'])
    lr_probs = lr.predict_proba(df_test[['Department', 'pa', 'cn']])[:,1]
    result_series = pd.Series(lr_probs, index=df_test.index)
    
    return result_series
new_connections_predictions()


# In[ ]:




